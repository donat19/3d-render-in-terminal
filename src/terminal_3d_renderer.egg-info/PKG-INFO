Metadata-Version: 2.4
Name: terminal-3d-renderer
Version: 0.1.0
Summary: Colourful ANSI-based 3D renderer for the terminal
Author: droid
License-Expression: MIT
Keywords: terminal,3d,renderer,ansi,demo
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Environment :: Console
Classifier: Topic :: Multimedia :: Graphics :: 3D Rendering
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# Terminal 3D Renderer

Colourful real-time 3D rendering directly inside your terminal. The project projects and shades triangle meshes, writes ANSI 256-colour frames, and is tuned to run smoothly on plain Debian GNU/Linux shells (tested on Debian 12, kernel 6.1 on ARM64).

## Highlights

- Pure Python 3.10+ implementation with no third-party dependencies.
- Software rasteriser with back-face culling, depth buffering, and diffuse shading.
- Vibrant ANSI 256-colour output with adaptive character shading.
- Respects terminal resizes on the fly; just stretch the window for more pixels.
- Easily customisable rotation speed, FOV, light direction, and render duration.

## Requirements

- Python 3.10 or newer.
- A terminal that supports ANSI escape sequences (most modern shells, including Debian's default `bash`/`dash`/`zsh`).

## Setup

After cloning, you can bootstrap everything with `make` (uses Python 3.10+):

```bash
make install
```

This creates a `.venv/` virtual environment and installs the package in editable mode. If you prefer to manage environments yourself, run `pip install -e .` inside whatever Python environment you choose.

## Run the demo

With the virtual environment prepared, launch the animation:

```bash
make run
```

The `run` target simply calls the installed console script `terminal-renderer`. To tweak parameters manually you can invoke it directly:

```bash
.venv/bin/terminal-renderer --fps 24 --fov 70 --scale 2.0
```

Available flags:

| Flag | Description | Default |
| --- | --- | --- |
| `--fps` | Target frames per second | `20` |
| `--fov` | Field of view in degrees | `70` |
| `--distance` | Camera distance from mesh centre | `5` |
| `--light X Y Z` | Directional light vector | `-0.4 0.8 -0.6` |
| `--scale` | Uniform mesh scale multiplier | `2.0` |
| `--speed` | Rotation speed multiplier | `1.0` |
| `--frames` | Render a fixed number of frames before exiting | `0` (run forever) |

Feel free to resize the terminal while the renderer is running; the engine automatically adapts to the new resolution.

## Tests

All logic-level tests use Python's built-in `unittest` runner.

```bash
make test
```

## Build distribution artifacts

Generate wheel and sdist packages via:

```bash
make package
```

## How it works

- `src/renderer/engine.py` implements vector math, perspective projection, triangle rasterisation, a simple diffuse lighting model, and ANSI colour mapping.
- `src/renderer/objects.py` contains ready-made meshes (currently a colourful cube) described via triangles.
- `src/renderer/terminal.py` hides cursor flicker, handles clearing, and streams frames to the terminal.
- `src/main.py` glues everything together into a CLI-driven animation loop with adaptive frame timing.

The renderer uses a z-buffer to resolve visibility, back-face culling to skip hidden surfaces, and a small ASCII gradient to add depth perception in addition to colours.

Enjoy exploring and tweaking the parameters to craft your own terminal art!
